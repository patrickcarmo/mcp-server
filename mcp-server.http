# PatrickCarmo MCP Server REST API Examples
# Use this file with VS Code REST Client extension
# Make sure the server is running: npm run start:http
#
# IMPORTANT: All MCP requests MUST include the Accept header:
# Accept: application/json, text/event-stream

@MCP_SERVER=http://localhost:3000
@MCP_ENDPOINT={{MCP_SERVER}}/mcp
@SESSION_ID=0e6f251c-921f-4acf-a619-df1ba01354bc

### Health Check
GET {{MCP_SERVER}}/health
Content-Type: application/json

### Initialize MCP Session
# Copy the session ID from the 'mcp-session-id' header in the response
# and update the @SESSION_ID variable above
POST {{MCP_ENDPOINT}}
Content-Type: application/json
Accept: application/json, text/event-stream

{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "initialize",
  "params": {
    "protocolVersion": "2024-11-05",
    "capabilities": {
      "tools": {}
    },
    "clientInfo": {
      "name": "rest-client",
      "version": "1.0.0"
    }
  }
}

### List Available Tools
# First, get the session ID from the previous request and update @SESSION_ID variable
POST {{MCP_ENDPOINT}}
Content-Type: application/json
Accept: application/json, text/event-stream
mcp-session-id: {{SESSION_ID}}

{
  "jsonrpc": "2.0",
  "id": 2,
  "method": "tools/list"
}

### Call Friendly Greeting Tool (without name)
POST {{MCP_ENDPOINT}}
Content-Type: application/json
Accept: application/json, text/event-stream
mcp-session-id: {{SESSION_ID}}

{
  "jsonrpc": "2.0",
  "id": 3,
  "method": "tools/call",
  "params": {
    "name": "friendly_greeting",
    "arguments": {}
  }
}

### Call Friendly Greeting Tool (with name)
POST {{MCP_ENDPOINT}}
Content-Type: application/json
Accept: application/json, text/event-stream
mcp-session-id: {{SESSION_ID}}

{
  "jsonrpc": "2.0",
  "id": 4,
  "method": "tools/call",
  "params": {
    "name": "friendly_greeting",
    "arguments": {
      "name": "Patrick"
    }
  }
}

### Get Tabnews Articles (default limit)
POST {{MCP_ENDPOINT}}
Content-Type: application/json
Accept: application/json, text/event-stream
mcp-session-id: {{SESSION_ID}}

{
  "jsonrpc": "2.0",
  "id": 5,
  "method": "tools/call",
  "params": {
    "name": "get_tabnews_articles",
    "arguments": {}
  }
}

### Get Tabnews Articles (with custom limit)
POST {{MCP_ENDPOINT}}
Content-Type: application/json
Accept: application/json, text/event-stream
mcp-session-id: {{SESSION_ID}}

{
  "jsonrpc": "2.0",
  "id": 6,
  "method": "tools/call",
  "params": {
    "name": "get_tabnews_articles",
    "arguments": {
      "limit": 5
    }
  }
}

### Get Tabnews Articles (maximum limit)
POST {{MCP_ENDPOINT}}
Content-Type: application/json
Accept: application/json, text/event-stream
mcp-session-id: {{SESSION_ID}}

{
  "jsonrpc": "2.0",
  "id": 7,
  "method": "tools/call",
  "params": {
    "name": "get_tabnews_articles",
    "arguments": {
      "limit": 30
    }
  }
}

### Close Session
DELETE {{MCP_ENDPOINT}}
Accept: application/json, text/event-stream
mcp-session-id: {{SESSION_ID}}

### Test Error Handling - Invalid Tool
POST {{MCP_ENDPOINT}}
Content-Type: application/json
Accept: application/json, text/event-stream
mcp-session-id: {{SESSION_ID}}

{
  "jsonrpc": "2.0",
  "id": 8,
  "method": "tools/call",
  "params": {
    "name": "non_existent_tool",
    "arguments": {}
  }
}

### Test Error Handling - Invalid Limit
POST {{MCP_ENDPOINT}}
Content-Type: application/json
Accept: application/json, text/event-stream
mcp-session-id: {{SESSION_ID}}

{
  "jsonrpc": "2.0",
  "id": 9,
  "method": "tools/call",
  "params": {
    "name": "get_tabnews_articles",
    "arguments": {
      "limit": 50
    }
  }
} 